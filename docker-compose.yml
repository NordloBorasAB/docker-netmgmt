version: "3.5"

services:
  traefik:
    image: traefik:2.7
    container_name: traefik
    command:
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
      - "--log=true"
      - "--log.level=INFO"
      - "--entrypoints.http=true"
      - "--entrypoints.http.address=:80"
      - "--entrypoints.http.http.redirections.entrypoint.to=https"
      - "--entrypoints.http.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.https=true"
      - "--entrypoints.https.address=:443"
      - "--certificatesresolvers.letsencrypt"
      - "--certificatesresolvers.letsencrypt.acme.storage=acme.json"
      - "--certificatesresolvers.letsencrypt.acme.email=${EMAIL}"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge"
      - "--certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=http"
      - "--providers.docker"
      - "--providers.docker.watch=true"
      - "--providers.docker.exposedbydefault=false"
      - "--serverstransport.insecureskipverify=true"

    ports:
      - target: 80
        published: 80
        protocol: tcp
      - target: 443
        published: 443
        protocol: tcp
    volumes:
      - "./acme.json:/acme.json"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
           - net1
    restart: unless-stopped

  db:
    image: mariadb:10.5
    container_name: librenms_db
    command:
      - "mysqld"
      - "--sql-mode="
      - "--innodb-file-per-table=1"
      - "--lower-case-table-names=0"
      - "--character-set-server=utf8"
      - "--collation-server=utf8_unicode_ci"
    volumes:
      - "./db:/var/lib/mysql"
    environment:
      - "TZ=${TZ}"
      - "MYSQL_ALLOW_EMPTY_PASSWORD=yes"
      - "MYSQL_DATABASE=${MYSQL_DATABASE}"
      - "MYSQL_USER=${MYSQL_USER}"
      - "MYSQL_PASSWORD=${MYSQL_PASSWORD}"
    networks:
            - net1
    restart: unless-stopped

  memcached:
    image: memcached:alpine
    container_name: librenms_memcached
    environment:
      - "TZ=${TZ}"
    networks:
            - net1
    restart: unless-stopped

  redis:
    image: redis:5.0-alpine
    container_name: librenms_redis
    environment:
      - "TZ=${TZ}"
    networks:
            - net1
    restart: always

  smtp:
    image: juanluisbaptiste/postfix
    container_name: librenms_smtp
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      - "SERVER_HOSTNAME=${LIBREDOMAIN}"
      - "SMTP_SERVER=${SMTP_SERVER}"
      - "SMTP_USERNAME=${SMTP_USERNAME}"
      - "SMTP_PASSWORD=${SMTP_PASSWORD}"
    networks:
            - net1
    restart: unless-stopped

  librenms:
    image: librenms/librenms:22.6.0
    container_name: librenms
    domainname: ${LIBREDOMAIN}
    hostname: librenms
    depends_on:
      - db
      - memcached
      - smtp
    volumes:
      - "./librenms:/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.librenms.entrypoints=https"
      - "traefik.http.routers.librenms.rule=Host(`${LIBREDOMAIN}`)"
      - "traefik.http.routers.librenms.tls=true"
      - "traefik.http.routers.librenms.tls.domains[0].main=${LIBREDOMAIN}"
      - "traefik.http.services.librenms.loadbalancer.server.port=8000"
    environment:
      - "TZ=${TZ}"
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "DB_HOST=db"
      - "DB_NAME=${MYSQL_DATABASE}"
      - "DB_USER=${MYSQL_USER}"
      - "DB_PASSWORD=${MYSQL_PASSWORD}"
      - "DB_TIMEOUT=60"
    env_file:
      - "./librenms.env"
    networks:
           net1:
            ipv4_address: ${LIBREIP}
    restart: unless-stopped

  dispatcher:
    image: librenms/librenms:22.6.0
    container_name: librenms_dispatcher
    hostname: librenms-dispatcher
    depends_on:
      - librenms
      - redis
    volumes:
      - "./librenms:/data"
    env_file:
      - "./librenms.env"
    environment:
      - "TZ=${TZ}"
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "DB_HOST=db"
      - "DB_NAME=${MYSQL_DATABASE}"
      - "DB_USER=${MYSQL_USER}"
      - "DB_PASSWORD=${MYSQL_PASSWORD}"
      - "DB_TIMEOUT=60"
      - "DISPATCHER_NODE_ID=dispatcher1"
      - "REDIS_HOST=redis"
      - "REDIS_PORT=6379"
      - "REDIS_DB=0"
      - "SIDECAR_DISPATCHER=1"
    networks:
            - net1
    restart: always

  syslog-ng:
    image: librenms/librenms:22.6.0
    container_name: librenms_syslog
    domainname: ${LIBREDOMAIN}
    hostname: librenms
    depends_on:
      - librenms
    ports:
      - target: 514
        published: 514
        protocol: tcp
      - target: 514
        published: 514
        protocol: udp
    volumes:
      - "./librenms:/data"
    environment:
      - "TZ=${TZ}"
      - "PUID=${PUID}"
      - "PGID=${PGID}"
      - "DB_HOST=db"
      - "DB_NAME=${MYSQL_DATABASE}"
      - "DB_USER=${MYSQL_USER}"
      - "DB_PASSWORD=${MYSQL_PASSWORD}"
      - "DB_TIMEOUT=60"
      - "SIDECAR_SYSLOGNG=1"
    env_file:
      - "./librenms.env"
    networks:
            - net1
    restart: unless-stopped

  #oxidized:
  #  restart: unless-stopped
  #  image: oxidized/oxidized:latest
  #  environment:
  #    CONFIG_RELOAD_INTERVAL: 600
  #  volumes:
  #    - ./oxidized:/root/.config/oxidized
  #  #command removes pid-file if it exsist on boot. prevents fail on boot
  #  command: bash -c 'rm /root/.config/oxidized/pid; /sbin/my_init'
  #  networks:
  #         net1:
  #            ipv4_address: ${OXIDIP}

  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    security_opt:
      -  no-new-privileges:true
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./portainer:/data"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.entrypoints=https"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINERDOMAIN}`)"
      - "traefik.http.services.portainer.loadbalancer.server.scheme=https"
      - "traefik.http.services.portainer.loadbalancer.server.port=9443"
      - "traefik.http.routers.portainer.tls=true"
      - "traefik.http.routers.portainer.tls.domains[0].main=${PORTAINERDOMAIN}"
    networks:
            - net1
  netbox:
    image: netboxcommunity/netbox:latest
    container_name: netbox
    depends_on:
    - netbox_postgres
    - netbox_redis
    - netbox_redis-cache
    #- netbox-worker
    env_file: ./netbox/env/netbox.env
    environment:
      SKIP_STARTUP_SCRIPTS: ${SKIP_STARTUP_SCRIPTS-false}
    user: 'unit:root'
    volumes:
    - ./netbox/configuration:/etc/netbox/config:z,ro
    - ./netbox/reports:/etc/netbox/reports:z,ro
    - ./netbox/scripts:/etc/netbox/scripts:z,ro
    - ./netbox/netbox-media-files:/opt/netbox/netbox/media:z
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.netbox.entrypoints=https"
      - "traefik.http.routers.netbox.rule=Host(`${NETBOXDOMAIN}`)"
      - "traefik.http.services.netbox.loadbalancer.server.scheme=https"
      - "traefik.http.services.netbox.loadbalancer.server.port=9443"
      - "traefik.http.routers.netbox.tls=true"
      - "traefik.http.routers.netbox.tls.domains[0].main=${NETBOXDOMAIN}"
    networks:
            - net1
            
  #netbox-worker:
  #  <<: *netbox
  #  depends_on:
  #  - redis
  #  - postgres
  #  command:
  #  - /opt/netbox/venv/bin/python
  #  - /opt/netbox/netbox/manage.py
  #  - rqworker
  #netbox-housekeeping:
  #  <<: *netbox
  #  depends_on:
  #  - redis
  #  - postgres
  #  command:
  #  - /opt/netbox/housekeeping.sh
  
  netbox-postgres:
    image: postgres:14-alpine
    container_name: netbox-postgres
    env_file: ./netbox/env/postgres.env
    volumes:
    - ./netbox/netbox-postgres-data:/var/lib/postgresql/data
    networks:
            - net1

  netbox-redis:
    image: redis:7-alpine
    container_name: netbox-redis
    command:
    - sh
    - -c # this is to evaluate the $REDIS_PASSWORD from the env
    - redis-server --appendonly yes --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: ./netbox/env/redis.env
    volumes:
    - ./netbox/netbox-redis-data:/data
    networks:
            - net1
  
  netbox-redis-cache:
    image: redis:7-alpine
    container_name: netbox-redis-cache
    command:
    - sh
    - -c # this is to evaluate the $REDIS_PASSWORD from the env
    - redis-server --requirepass $$REDIS_PASSWORD ## $$ because of docker-compose
    env_file: ./netbox/env/redis-cache.env
    volumes:
    - ./netbox/netbox-redis-cache-data:/data
    networks:
            - net1  
  pwpush:
    image: pglombardo/pwpush-ephemeral:latest
    hostname: pwpush
    container_name: pwpush
    environment:
      FORCE_SSL: ''
      EXPIRE_AFTER_DAYS_DEFAULT: '1'
      EXPIRE_AFTER_VIEWS_DEFAULT: '1'
      RETRIEVAL_STEP_DEFAULT: 'true'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pwpush.entrypoints=https"
      - "traefik.http.routers.pwpush.rule=Host(`${PWPUSHDOMAIN}`)"
      - "traefik.http.routers.pwpush.tls=true"
      - "traefik.http.routers.netbox.tls.domains[0].main=${PWPUSHDOMAIN}"
      - "traefik.http.services.pwpush.loadbalancer.server.port=5100"
    networks:
      - net1
    restart: always

networks:
        net1:
          driver: bridge
          ipam:
            driver: default
            config:
                    - subnet: ${SUBNET}
